{
  "version": 3,
  "sources": ["../../../app/utils.ts"],
  "sourcesContent": ["import { useMatches } from \"@remix-run/react\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport type { User } from \"~/models/user.server\";\r\n\r\nconst DEFAULT_REDIRECT = \"/\";\r\n\r\n/**\r\n * This should be used any time the redirect path is user-provided\r\n * (Like the query string on our login/signup pages). This avoids\r\n * open-redirect vulnerabilities.\r\n * @param {string} to The redirect destination\r\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\r\n */\r\nexport function safeRedirect(\r\n  to: FormDataEntryValue | string | null | undefined,\r\n  defaultRedirect: string = DEFAULT_REDIRECT,\r\n) {\r\n  if (!to || typeof to !== \"string\") {\r\n    return defaultRedirect;\r\n  }\r\n\r\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\r\n    return defaultRedirect;\r\n  }\r\n\r\n  return to;\r\n}\r\n\r\n/**\r\n * This base hook is used in other hooks to quickly search for specific data\r\n * across all loader data using useMatches.\r\n * @param {string} id The route id\r\n * @returns {JSON|undefined} The router data or undefined if not found\r\n */\r\nexport function useMatchesData(\r\n  id: string,\r\n): Record<string, unknown> | undefined {\r\n  const matchingRoutes = useMatches();\r\n  const route = useMemo(\r\n    () => matchingRoutes.find((route) => route.id === id),\r\n    [matchingRoutes, id],\r\n  );\r\n  return route?.data;\r\n}\r\n\r\nfunction isUser(user: any): user is User {\r\n  return user && typeof user === \"object\" && typeof user.email === \"string\";\r\n}\r\n\r\nexport function useOptionalUser(): User | undefined {\r\n  const data = useMatchesData(\"root\");\r\n  if (!data || !isUser(data.user)) {\r\n    return undefined;\r\n  }\r\n  return data.user;\r\n}\r\n\r\nexport function useUser(): User {\r\n  const maybeUser = useOptionalUser();\r\n  if (!maybeUser) {\r\n    throw new Error(\r\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\",\r\n    );\r\n  }\r\n  return maybeUser;\r\n}\r\n\r\nexport function validateEmail(email: unknown): email is string {\r\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\r\n}\r\n\r\nexport const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport function asUTC(date: Date) {\r\n  return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\r\n}\r\n\r\nexport function parseDate(dateString: string) {\r\n  const [year, month, day] = dateString.split(\"-\").map(Number);\r\n  return asUTC(new Date(year, month - 1, day));\r\n}\r\n"],
  "mappings": ";;;;;;;;AACA,mBAAwB;AAuEjB,IAAM,oBAAoB,IAAI,KAAK,aAAa,SAAS;AAAA,EAC9D,OAAO;AAAA,EACP,UAAU;AAAA,EACV,uBAAuB;AACzB,CAAC;AAEM,SAAS,MAAM,MAAY;AAChC,SAAO,IAAI,KAAK,KAAK,eAAe,GAAG,KAAK,YAAY,GAAG,KAAK,WAAW,CAAC;AAC9E;AAEO,SAAS,UAAU,YAAoB;AAC5C,QAAM,CAAC,MAAM,OAAO,GAAG,IAAI,WAAW,MAAM,GAAG,EAAE,IAAI,MAAM;AAC3D,SAAO,MAAM,IAAI,KAAK,MAAM,QAAQ,GAAG,GAAG,CAAC;AAC7C;",
  "names": []
}
