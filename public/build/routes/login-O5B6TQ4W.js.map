{
  "version": 3,
  "sources": ["empty-module:~/models/user.server", "../../../app/routes/login.tsx"],
  "sourcesContent": ["module.exports = {};", "import type { ActionArgs, LoaderArgs, MetaFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useSearchParams } from \"@remix-run/react\";\r\nimport * as React from \"react\";\r\n\r\nimport { createUserSession, getUserId } from \"~/session.server\";\r\nimport { createUser, getUserByEmail, verifyLogin } from \"~/models/user.server\";\r\nimport { safeRedirect, validateEmail } from \"~/utils\";\r\nimport { FullFakebooksLogo, inputClasses } from \"~/components\";\r\n\r\nexport async function loader({ request }: LoaderArgs) {\r\n  const userId = await getUserId(request);\r\n  if (userId) return redirect(\"/\");\r\n  return json({});\r\n}\r\n\r\nexport async function action({ request }: ActionArgs) {\r\n  const formData = await request.formData();\r\n  const intent = formData.get(\"intent\");\r\n  const email = formData.get(\"email\");\r\n  const password = formData.get(\"password\");\r\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\r\n  const remember = formData.get(\"remember\");\r\n\r\n  if (!validateEmail(email)) {\r\n    return json({ errors: { email: \"Email is invalid\" } }, { status: 400 });\r\n  }\r\n\r\n  if (typeof password !== \"string\") {\r\n    return json(\r\n      { errors: { password: \"Password is required\" } },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  if (password.length < 8) {\r\n    return json(\r\n      { errors: { password: \"Password is too short\" } },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  let user: { id: string } | null;\r\n\r\n  switch (intent) {\r\n    case \"signup\": {\r\n      const existingUser = await getUserByEmail(email);\r\n      if (existingUser) {\r\n        return json(\r\n          { errors: { email: \"A user already exists with this email\" } },\r\n          { status: 400 },\r\n        );\r\n      }\r\n\r\n      user = await createUser(email, password);\r\n      break;\r\n    }\r\n    case \"login\": {\r\n      user = await verifyLogin(email, password);\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error(`Unknown intent: ${intent}`);\r\n    }\r\n  }\r\n\r\n  if (!user) {\r\n    return json(\r\n      { errors: { email: \"Invalid email or password\" } },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  return createUserSession({\r\n    request,\r\n    userId: user.id,\r\n    remember: remember === \"on\" ? true : false,\r\n    redirectTo,\r\n  });\r\n}\r\n\r\nexport const meta: MetaFunction = () => {\r\n  return {\r\n    title: \"Login to Fakebooks\",\r\n  };\r\n};\r\n\r\nexport default function LoginPage() {\r\n  const [searchParams] = useSearchParams();\r\n  const redirectTo = searchParams.get(\"redirectTo\") ?? \"\";\r\n  const actionData = useActionData<typeof action>();\r\n  const emailRef = React.useRef<HTMLInputElement>(null);\r\n  const passwordRef = React.useRef<HTMLInputElement>(null);\r\n  let emailError: string | null = null;\r\n  let passwordError: string | null = null;\r\n  if (actionData && actionData.errors) {\r\n    const { errors } = actionData;\r\n    emailError = \"email\" in errors ? errors.email : null;\r\n    passwordError = \"password\" in errors ? errors.password : null;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (emailError) {\r\n      emailRef.current?.focus();\r\n    } else if (passwordError) {\r\n      passwordRef.current?.focus();\r\n    }\r\n  }, [emailError, passwordError]);\r\n\r\n  return (\r\n    <div className=\"flex min-h-full flex-col justify-center\">\r\n      <h1 className=\"mb-12\">\r\n        <FullFakebooksLogo size=\"lg\" position=\"center\" />\r\n      </h1>\r\n      <div className=\"mx-auto w-full max-w-md px-8\">\r\n        <Form method=\"post\" className=\"space-y-6\">\r\n          <div>\r\n            <label\r\n              htmlFor=\"email\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Email address\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <input\r\n                ref={emailRef}\r\n                id=\"email\"\r\n                required\r\n                autoFocus={true}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                aria-invalid={emailError ? true : undefined}\r\n                aria-describedby=\"email-error\"\r\n                className={inputClasses}\r\n              />\r\n              {emailError && (\r\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\r\n                  {emailError}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label\r\n              htmlFor=\"password\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Password\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <input\r\n                id=\"password\"\r\n                ref={passwordRef}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                aria-invalid={passwordError ? true : undefined}\r\n                aria-describedby=\"password-error\"\r\n                className={inputClasses}\r\n              />\r\n              {passwordError && (\r\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\r\n                  {passwordError}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                id=\"remember\"\r\n                name=\"remember\"\r\n                type=\"checkbox\"\r\n                className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\r\n              />\r\n              <label\r\n                htmlFor=\"remember\"\r\n                className=\"ml-2 block text-sm text-gray-900\"\r\n              >\r\n                Remember me\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-col gap-4 md:flex-row md:gap-6\">\r\n            <button\r\n              type=\"submit\"\r\n              name=\"intent\"\r\n              value=\"login\"\r\n              className=\"w-full rounded bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:bg-green-400\"\r\n            >\r\n              Log in\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              name=\"intent\"\r\n              value=\"signup\"\r\n              className=\"w-full rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\r\n            >\r\n              Sign Up\r\n            </button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACGlB,YAAuB;AAEvB,qBAA6C;AAC7C,kBAAwD;AANxD;AAiFO,IAAM,OAAqB,MAAM;AACtC,SAAO;AAAA,IACL,OAAO;AAAA,EACT;AACF;AAEe,SAAR,YAA6B;AAvFpC;AAwFE,QAAM,CAAC,YAAY,IAAI,gBAAgB;AACvC,QAAM,cAAa,kBAAa,IAAI,YAAY,MAA7B,YAAkC;AACrD,QAAM,aAAa,cAA6B;AAChD,QAAM,WAAiB,aAAyB,IAAI;AACpD,QAAM,cAAoB,aAAyB,IAAI;AACvD,MAAI,aAA4B;AAChC,MAAI,gBAA+B;AACnC,MAAI,cAAc,WAAW,QAAQ;AACnC,UAAM,EAAE,OAAO,IAAI;AACnB,iBAAa,WAAW,SAAS,OAAO,QAAQ;AAChD,oBAAgB,cAAc,SAAS,OAAO,WAAW;AAAA,EAC3D;AAEA,EAAM,gBAAU,MAAM;AArGxB,QAAAA,KAAA;AAsGI,QAAI,YAAY;AACd,OAAAA,MAAA,SAAS,YAAT,gBAAAA,IAAkB;AAAA,IACpB,WAAW,eAAe;AACxB,wBAAY,YAAZ,mBAAqB;AAAA,IACvB;AAAA,EACF,GAAG,CAAC,YAAY,aAAa,CAAC;AAE9B,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb;AAAA,yDAAC;AAAA,QAAG,WAAU;AAAA,QACZ,6DAAC;AAAA,UAAkB,MAAK;AAAA,UAAK,UAAS;AAAA,WAAtC;AAAA;AAAA;AAAA;AAAA,eAA+C;AAAA,SADjD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC;AAAA,QAAI,WAAU;AAAA,QACb,6DAAC;AAAA,UAAK,QAAO;AAAA,UAAO,WAAU;AAAA,UAC5B;AAAA,+DAAC;AAAA,cACC;AAAA,mEAAC;AAAA,kBACC,SAAQ;AAAA,kBACR,WAAU;AAAA,kBACX;AAAA,mBAHD;AAAA;AAAA;AAAA;AAAA,uBAKA;AAAA,gBACA,mDAAC;AAAA,kBAAI,WAAU;AAAA,kBACb;AAAA,uEAAC;AAAA,sBACC,KAAK;AAAA,sBACL,IAAG;AAAA,sBACH,UAAQ;AAAA,sBACR,WAAW;AAAA,sBACX,MAAK;AAAA,sBACL,MAAK;AAAA,sBACL,cAAa;AAAA,sBACb,gBAAc,aAAa,OAAO;AAAA,sBAClC,oBAAiB;AAAA,sBACjB,WAAW;AAAA,uBAVb;AAAA;AAAA;AAAA;AAAA,2BAWA;AAAA,oBACC,cACC,mDAAC;AAAA,sBAAI,WAAU;AAAA,sBAAoB,IAAG;AAAA,sBACnC;AAAA,uBADH;AAAA;AAAA;AAAA;AAAA,2BAEA;AAAA;AAAA,mBAhBJ;AAAA;AAAA;AAAA;AAAA,uBAkBA;AAAA;AAAA,eAzBF;AAAA;AAAA;AAAA;AAAA,mBA0BA;AAAA,YAEA,mDAAC;AAAA,cACC;AAAA,mEAAC;AAAA,kBACC,SAAQ;AAAA,kBACR,WAAU;AAAA,kBACX;AAAA,mBAHD;AAAA;AAAA;AAAA;AAAA,uBAKA;AAAA,gBACA,mDAAC;AAAA,kBAAI,WAAU;AAAA,kBACb;AAAA,uEAAC;AAAA,sBACC,IAAG;AAAA,sBACH,KAAK;AAAA,sBACL,MAAK;AAAA,sBACL,MAAK;AAAA,sBACL,cAAa;AAAA,sBACb,gBAAc,gBAAgB,OAAO;AAAA,sBACrC,oBAAiB;AAAA,sBACjB,WAAW;AAAA,uBARb;AAAA;AAAA;AAAA;AAAA,2BASA;AAAA,oBACC,iBACC,mDAAC;AAAA,sBAAI,WAAU;AAAA,sBAAoB,IAAG;AAAA,sBACnC;AAAA,uBADH;AAAA;AAAA;AAAA;AAAA,2BAEA;AAAA;AAAA,mBAdJ;AAAA;AAAA;AAAA;AAAA,uBAgBA;AAAA;AAAA,eAvBF;AAAA;AAAA;AAAA;AAAA,mBAwBA;AAAA,YAEA,mDAAC;AAAA,cAAM,MAAK;AAAA,cAAS,MAAK;AAAA,cAAa,OAAO;AAAA,eAA9C;AAAA;AAAA;AAAA;AAAA,mBAA0D;AAAA,YAC1D,mDAAC;AAAA,cAAI,WAAU;AAAA,cACb,6DAAC;AAAA,gBAAI,WAAU;AAAA,gBACb;AAAA,qEAAC;AAAA,oBACC,IAAG;AAAA,oBACH,MAAK;AAAA,oBACL,MAAK;AAAA,oBACL,WAAU;AAAA,qBAJZ;AAAA;AAAA;AAAA;AAAA,yBAKA;AAAA,kBACA,mDAAC;AAAA,oBACC,SAAQ;AAAA,oBACR,WAAU;AAAA,oBACX;AAAA,qBAHD;AAAA;AAAA;AAAA;AAAA,yBAKA;AAAA;AAAA,iBAZF;AAAA;AAAA;AAAA;AAAA,qBAaA;AAAA,eAdF;AAAA;AAAA;AAAA;AAAA,mBAeA;AAAA,YACA,mDAAC;AAAA,cAAI,WAAU;AAAA,cACb;AAAA,mEAAC;AAAA,kBACC,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,OAAM;AAAA,kBACN,WAAU;AAAA,kBACX;AAAA,mBALD;AAAA;AAAA;AAAA;AAAA,uBAOA;AAAA,gBACA,mDAAC;AAAA,kBACC,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,OAAM;AAAA,kBACN,WAAU;AAAA,kBACX;AAAA,mBALD;AAAA;AAAA;AAAA;AAAA,uBAOA;AAAA;AAAA,eAhBF;AAAA;AAAA;AAAA;AAAA,mBAiBA;AAAA;AAAA,WAzFF;AAAA;AAAA;AAAA;AAAA,eA0FA;AAAA,SA3FF;AAAA;AAAA;AAAA;AAAA,aA4FA;AAAA;AAAA,KAhGF;AAAA;AAAA;AAAA;AAAA,SAiGA;AAEJ;",
  "names": ["_a"]
}
