{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/sales/invoices/$invoiceId.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\r\nimport type { UseDataFunctionReturn } from \"@remix-run/react/dist/components\";\r\nimport { json } from \"@remix-run/node\";\r\nimport {\r\n  Link,\r\n  useCatch,\r\n  useFetcher,\r\n  useLoaderData,\r\n  useLocation,\r\n  useParams,\r\n} from \"@remix-run/react\";\r\nimport { inputClasses, LabelText, submitButtonClasses } from \"~/components\";\r\nimport { getInvoiceDetails } from \"~/models/invoice.server\";\r\nimport { requireUser } from \"~/session.server\";\r\nimport { currencyFormatter, parseDate } from \"~/utils\";\r\nimport { createDeposit } from \"~/models/deposit.server\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n  await requireUser(request);\r\n  const { invoiceId } = params;\r\n  if (typeof invoiceId !== \"string\") {\r\n    throw new Error(\"This should be impossible.\");\r\n  }\r\n  const invoiceDetails = await getInvoiceDetails(invoiceId);\r\n  if (!invoiceDetails) {\r\n    throw new Response(\"not found\", { status: 404 });\r\n  }\r\n  return json({\r\n    customerName: invoiceDetails.invoice.customer.name,\r\n    customerId: invoiceDetails.invoice.customer.id,\r\n    totalAmount: invoiceDetails.totalAmount,\r\n    dueStatus: invoiceDetails.dueStatus,\r\n    dueDisplay: invoiceDetails.dueStatusDisplay,\r\n    invoiceDateDisplay: invoiceDetails.invoice.invoiceDate.toLocaleDateString(),\r\n    lineItems: invoiceDetails.invoice.lineItems.map((li) => ({\r\n      id: li.id,\r\n      description: li.description,\r\n      quantity: li.quantity,\r\n      unitPrice: li.unitPrice,\r\n    })),\r\n    deposits: invoiceDetails.invoice.deposits.map((deposit) => ({\r\n      id: deposit.id,\r\n      amount: deposit.amount,\r\n      depositDateFormatted: deposit.depositDate.toLocaleDateString(),\r\n    })),\r\n  });\r\n}\r\n\r\nfunction validateAmount(amount: number) {\r\n  if (amount <= 0) return \"Must be greater than 0\";\r\n  if (Number(amount.toFixed(2)) !== amount) {\r\n    return \"Must only have two decimal places\";\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction validateDepositDate(date: Date) {\r\n  if (Number.isNaN(date.getTime())) {\r\n    return \"Please enter a valid date\";\r\n  }\r\n  return null;\r\n}\r\n\r\nexport async function action({ request, params }: ActionArgs) {\r\n  await requireUser(request);\r\n  const { invoiceId } = params;\r\n  if (typeof invoiceId !== \"string\") {\r\n    throw new Error(\"This should be impossible.\");\r\n  }\r\n  const formData = await request.formData();\r\n  const intent = formData.get(\"intent\");\r\n  invariant(typeof intent === \"string\", \"intent required\");\r\n  switch (intent) {\r\n    case \"create-deposit\": {\r\n      const amount = Number(formData.get(\"amount\"));\r\n      const depositDateString = formData.get(\"depositDate\");\r\n      const note = formData.get(\"note\");\r\n      invariant(!Number.isNaN(amount), \"amount must be a number\");\r\n      invariant(typeof depositDateString === \"string\", \"dueDate is required\");\r\n      invariant(typeof note === \"string\", \"dueDate is required\");\r\n      const depositDate = parseDate(depositDateString);\r\n\r\n      const errors = {\r\n        amount: validateAmount(amount),\r\n        depositDate: validateDepositDate(depositDate),\r\n      };\r\n      const hasErrors = Object.values(errors).some(\r\n        (errorMessage) => errorMessage,\r\n      );\r\n      if (hasErrors) {\r\n        return json({ errors });\r\n      }\r\n\r\n      await createDeposit({ invoiceId, amount, note, depositDate });\r\n      return new Response(\"ok\");\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported intent: ${intent}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst lineItemClassName =\r\n  \"flex justify-between border-t border-gray-100 py-4 text-[14px] leading-[24px]\";\r\nexport default function InvoiceRoute() {\r\n  const data = useLoaderData<typeof loader>();\r\n  const location = useLocation();\r\n  return (\r\n    <div className=\"relative p-10\" key={location.key}>\r\n      <Link\r\n        to={`../../customers/${data.customerId}`}\r\n        className=\"text-[length:14px] font-bold leading-6 text-blue-600 underline\"\r\n      >\r\n        {data.customerName}\r\n      </Link>\r\n      <div className=\"text-[length:32px] font-bold leading-[40px]\">\r\n        {currencyFormatter.format(data.totalAmount)}\r\n      </div>\r\n      <LabelText>\r\n        <span\r\n          className={\r\n            data.dueStatus === \"paid\"\r\n              ? \"text-green-brand\"\r\n              : data.dueStatus === \"overdue\"\r\n              ? \"text-red-brand\"\r\n              : \"\"\r\n          }\r\n        >\r\n          {data.dueDisplay}\r\n        </span>\r\n        {` \u2022 Invoiced ${data.invoiceDateDisplay}`}\r\n      </LabelText>\r\n      <div className=\"h-4\" />\r\n      {data.lineItems.map((item) => (\r\n        <LineItemDisplay\r\n          key={item.id}\r\n          description={item.description}\r\n          unitPrice={item.unitPrice}\r\n          quantity={item.quantity}\r\n        />\r\n      ))}\r\n      <div className={`${lineItemClassName} font-bold`}>\r\n        <div>Net Total</div>\r\n        <div>{currencyFormatter.format(data.totalAmount)}</div>\r\n      </div>\r\n      <div className=\"h-8\" />\r\n      <Deposits />\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface DepositFormControlsCollection extends HTMLFormControlsCollection {\r\n  amount?: HTMLInputElement;\r\n  depositDate?: HTMLInputElement;\r\n  note?: HTMLInputElement;\r\n  intent?: HTMLButtonElement;\r\n}\r\ninterface DepositFormElement extends HTMLFormElement {\r\n  readonly elements: DepositFormControlsCollection;\r\n}\r\n\r\nfunction Deposits() {\r\n  const data = useLoaderData<typeof loader>();\r\n  const newDepositFetcher = useFetcher();\r\n  const formRef = useRef<DepositFormElement>(null);\r\n\r\n  const deposits = [...data.deposits];\r\n\r\n  if (newDepositFetcher.submission) {\r\n    const amount = Number(newDepositFetcher.submission.formData.get(\"amount\"));\r\n    const depositDateVal =\r\n      newDepositFetcher.submission.formData.get(\"depositDate\");\r\n    const depositDate =\r\n      typeof depositDateVal === \"string\" ? parseDate(depositDateVal) : null;\r\n    if (\r\n      !validateAmount(amount) &&\r\n      depositDate &&\r\n      !validateDepositDate(depositDate)\r\n    ) {\r\n      deposits.push({\r\n        id: \"new\",\r\n        amount,\r\n        depositDateFormatted: depositDate.toLocaleDateString(),\r\n      });\r\n    }\r\n  }\r\n\r\n  const errors = newDepositFetcher.data?.errors as\r\n    | UseDataFunctionReturn<typeof action>[\"errors\"]\r\n    | undefined;\r\n\r\n  useEffect(() => {\r\n    if (!formRef.current) return;\r\n    if (newDepositFetcher.state !== \"idle\") return;\r\n\r\n    const formEl = formRef.current;\r\n\r\n    if (errors?.amount) {\r\n      formEl.elements.amount?.focus();\r\n    } else if (errors?.depositDate) {\r\n      formEl.elements.depositDate?.focus();\r\n    } else if (document.activeElement === formEl.elements.intent) {\r\n      formEl.reset();\r\n      formEl.elements.amount?.focus();\r\n    }\r\n  }, [newDepositFetcher.state, errors]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"font-bold leading-8\">Deposits</div>\r\n      {deposits.length > 0 ? (\r\n        deposits.map((deposit) => (\r\n          <div key={deposit.id} className={lineItemClassName}>\r\n            <Link\r\n              to={`../../deposits/${deposit.id}`}\r\n              className=\"text-blue-600 underline\"\r\n            >\r\n              {deposit.depositDateFormatted}\r\n            </Link>\r\n            <div>{currencyFormatter.format(deposit.amount)}</div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div>None yet</div>\r\n      )}\r\n      <newDepositFetcher.Form\r\n        method=\"post\"\r\n        className=\"grid grid-cols-1 gap-x-4 gap-y-2 lg:grid-cols-2\"\r\n        ref={formRef}\r\n        noValidate\r\n      >\r\n        <div className=\"min-w-[100px]\">\r\n          <div className=\"flex flex-wrap items-center gap-1\">\r\n            <LabelText>\r\n              <label htmlFor=\"depositAmount\">Amount</label>\r\n            </LabelText>\r\n            {errors?.amount ? (\r\n              <em id=\"amount-error\" className=\"text-d-p-xs text-red-600\">\r\n                {errors.amount}\r\n              </em>\r\n            ) : null}\r\n          </div>\r\n          <input\r\n            id=\"depositAmount\"\r\n            name=\"amount\"\r\n            type=\"number\"\r\n            className={inputClasses}\r\n            min=\"0.01\"\r\n            step=\"any\"\r\n            required\r\n            aria-invalid={Boolean(errors?.amount) || undefined}\r\n            aria-errormessage={errors?.amount ? \"amount-error\" : undefined}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div className=\"flex flex-wrap items-center gap-1\">\r\n            <LabelText>\r\n              <label htmlFor=\"depositDate\">Date</label>\r\n            </LabelText>\r\n            {errors?.depositDate ? (\r\n              <em id=\"depositDate-error\" className=\"text-d-p-xs text-red-600\">\r\n                {errors.depositDate}\r\n              </em>\r\n            ) : null}\r\n          </div>\r\n          <input\r\n            id=\"depositDate\"\r\n            name=\"depositDate\"\r\n            type=\"date\"\r\n            className={`${inputClasses} h-[34px]`}\r\n            required\r\n            // aria-invalid={Boolean(errors?.depositDate) || undefined}\r\n            // aria-errormessage={\r\n            //   errors?.depositDate ? \"depositDate-error\" : undefined\r\n            // }\r\n          />\r\n        </div>\r\n        <div className=\"grid grid-cols-1 gap-4 lg:col-span-2 lg:flex\">\r\n          <div className=\"flex-1\">\r\n            <LabelText>\r\n              <label htmlFor=\"depositNote\">Note</label>\r\n            </LabelText>\r\n            <input\r\n              id=\"depositNote\"\r\n              name=\"note\"\r\n              type=\"text\"\r\n              className={inputClasses}\r\n            />\r\n          </div>\r\n          <div className=\"flex items-end\">\r\n            <button\r\n              type=\"submit\"\r\n              className={submitButtonClasses}\r\n              name=\"intent\"\r\n              value=\"create-deposit\"\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </newDepositFetcher.Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LineItemDisplay({\r\n  description,\r\n  quantity,\r\n  unitPrice,\r\n}: {\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n}) {\r\n  return (\r\n    <div className={lineItemClassName}>\r\n      <div>{description}</div>\r\n      {quantity === 1 ? null : <div className=\"text-[10px]\">({quantity}x)</div>}\r\n      <div>{currencyFormatter.format(unitPrice)}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CatchBoundary() {\r\n  const caught = useCatch();\r\n  const params = useParams();\r\n\r\n  if (caught.status === 404) {\r\n    return (\r\n      <div className=\"p-12 text-red-500\">\r\n        No invoice found with the ID of \"{params.invoiceId}\"\r\n      </div>\r\n    );\r\n  }\r\n\r\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\r\n}\r\n\r\nexport function ErrorBoundary({ error }: { error: Error }) {\r\n  console.error(error);\r\n\r\n  return (\r\n    <div className=\"absolute inset-0 flex justify-center bg-red-100 pt-4\">\r\n      <div className=\"text-red-brand text-center\">\r\n        <div className=\"text-[14px] font-bold\">Oh snap!</div>\r\n        <div className=\"px-2 text-[12px]\">There was a problem. Sorry.</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_react", "_a"]
}
